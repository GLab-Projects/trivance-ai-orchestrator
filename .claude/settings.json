{
  "env": {
    "TRIVANCE_ENV": "local"
  },
  "permissions": {
    "defaultMode": "acceptEdits",
    "allow": [
      "Bash(npm run *)",
      "Bash(npm test *)",
      "Bash(npm install)",
      "Bash(yarn *)",
      "Bash(pnpm *)",
      "Bash(node *)",
      "Bash(python3 *)",
      "Bash(git status *)",
      "Bash(git log *)",
      "Bash(git diff *)",
      "Bash(git show *)",
      "Bash(git add *)",
      "Bash(git push origin feature/*)",
      "Bash(git push origin bugfix/*)",
      "Bash(git push origin hotfix/*)",
      "Bash(git push origin --set-upstream feature/*)",
      "Bash(git push origin --set-upstream bugfix/*)",
      "Bash(docker ps *)",
      "Bash(docker logs *)",
      "Bash(docker compose up *)",
      "Bash(docker compose down *)",
      "Bash(docker compose restart *)",
      "Bash(ls *)",
      "Bash(find *)",
      "Bash(grep *)",
      "Bash(rg *)",
      "Bash(cat *)",
      "Bash(head *)",
      "Bash(tail *)",
      "Bash(jq *)",
      "Bash(mkdir *)",
      "Bash(touch *)",
      "Bash(mv *)",
      "Bash(cp *)",
      "Bash(chmod +x *)",
      "Bash(pwd *)",
      "Bash(which *)",
      "Bash(whoami *)",
      "Bash(echo *)",
      "Bash(diff *)",
      "Bash(gh auth status)",
      "Bash(gh pr create *)",
      "Bash(gh pr view *)",
      "Bash(gh pr list *)",
      "Bash(gh issue create *)",
      "Bash(gh issue list *)",
      "Bash(gh api *)",
      "mcp__github__get_pull_request",
      "mcp__github__get_pull_request_comments",
      "mcp__github__get_issue_comments",
      "mcp__github__get_me",
      "mcp__github__get_pull_request_reviews",
      "mcp__github__search_issues",
      "mcp__github__create_issue",
      "mcp__github__update_issue",
      "mcp__github__update_pull_request",
      "mcp__github__get_issue",
      "mcp__github_comment__update_claude_comment",
      "mcp__github__list_pull_requests",
      "mcp__github__create_pull_request",
      "Bash(git checkout *)",
      "Bash(git pull *)",
      "Bash(git fetch *)",
      "Bash(git branch *)",
      "Bash(git checkout -b *)",
      "Bash(git branch -D pr/*)",
      "Bash(git branch -D pull-*)",
      "Bash(git branch -D *-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]*)"
    ],
    "deny": [
      "Bash(git push origin main)",
      "Bash(git push origin master)",
      "Bash(git push --force *)",
      "Bash(git push -f *)",
      "Bash(git reset --hard *)",
      "Bash(git clean -fd *)",
      "Read(.env)",
      "Read(*.env)",
      "Read(.env.*)",
      "Read(secrets/**)",
      "Read(*.key)",
      "Read(*.pem)",
      "Read(id_rsa)",
      "Read(id_ed25519)",
      "Bash(rm -rf *)",
      "Bash(sudo *)",
      "Bash(dd *)",
      "Bash(kill *)",
      "Bash(killall *)",
      "Bash(chmod 777 *)",
      "Write(/etc/**)",
      "Write(/bin/**)",
      "Write(/usr/bin/**)",
      "Bash(curl * | bash)",
      "Bash(wget * | bash)",
      "Bash(ssh *)",
      "Bash(nc *)",
      "Bash(nmap *)"
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/utils/statusline.sh"
  },
  "cleanupPeriodDays": 7,
  "enableAllProjectMcpServers": true,
  "hooks": {
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py UserPromptSubmit"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/minimal_thinking.py"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py Stop"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py Notification"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/security_guard.py"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/clean_code.py"
          }
        ]
      }
    ]
  }
}

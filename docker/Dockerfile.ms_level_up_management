# Multi-stage Dockerfile for ms_level_up_management (NestJS + Prisma)
FROM node:20-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    openssl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Install dev dependencies for build
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build application
RUN npm run build:dev

# Runtime stage
FROM node:20-slim AS runtime

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    dumb-init \
    openssl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd --gid 1001 --system nodejs && \
    useradd --uid 1001 --system --gid nodejs --shell /bin/bash nestjs

# Copy built application and dependencies
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma

# Ensure proper permissions for GraphQL schema generation in root directory
RUN chown -R nestjs:nodejs /app

# Create logs directory with proper permissions
RUN mkdir -p /logs && chown -R nestjs:nodejs /logs

# Set environment (configurable via build args or runtime env)
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

USER nestjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD timeout 3 bash -c 'cat < /dev/null > /dev/tcp/localhost/3000' || exit 1

# Add runtime environment configuration
ARG RUN_MODE=prod
ENV RUN_MODE=${RUN_MODE}

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "npx prisma migrate deploy && npm run start:${RUN_MODE}"]

# ü§ñ CLAUDE.md - Gu√≠a Operacional para Claude Code AI

> **WORKSPACE AUTO-CONFIGURADO** desde trivance-dev-config  
> **‚ö° HOT-RELOAD ‚â§2s EST√ÅNDAR** para desarrollo ultra-r√°pido

## üéØ MISSION CRITICAL - Read This First

**Este workspace est√° COMPLETAMENTE configurado y optimizado. No reinventes soluciones existentes.**

### ‚ö° GOLDEN RULES (Non-Negotiable)

1. **üöÄ `./start.sh`** - √öNICO comando maestro para TODO
2. **üê≥ Hot-reload ‚â§2s** - EST√ÅNDAR obligatorio, no opcional  
3. **üìÅ Multi-repo workspace** - 4 repositorios integrados
4. **üîß trivance-dev-config** - Configuraci√≥n centralizada y autoridad
5. **üá™üá∏ Spanish-first** - Docs y comunicaci√≥n en espa√±ol

## üõ°Ô∏è Critical Rules for AI

### ‚ùå NEVER DO THESE (Anti-Patterns)

**PROHIBIDO ABSOLUTAMENTE:**
- ‚ùå **Crear `start-all.sh`, `status.sh`** (eliminados por arquitectura limpia)
- ‚ùå **Duplicar `ENVIRONMENTS.md`** (symlink a docs/ implementado)
- ‚ùå **Modificar `docker-compose.dev.yml`** (configuraci√≥n maestra intocable)
- ‚ùå **Ignorar documentaci√≥n existente** (revisa SIEMPRE antes de actuar)
- ‚ùå **Crear archivos en workspace root** (van en trivance-dev-config/config/)
- ‚ùå **Generar secrets manualmente** (sistema autom√°tico implementado)

### ‚úÖ ALWAYS DO THESE (Best Practices)

**OBLIGATORIO SIEMPRE:**
- ‚úÖ **Usar `./start.sh`** (comando unificado)
- ‚úÖ **Leer README.md antes de actuar** (fuente de verdad)
- ‚úÖ **Verificar carpeta templates** antes de crear archivos
- ‚úÖ **Respetar arquitectura multi-repo** (no mono-repo)
- ‚úÖ **Documentar en espa√±ol** (equipo hispano-hablante)
- ‚úÖ **Preservar hot-reload ‚â§2s** (est√°ndar de productividad)

## üèóÔ∏è Comandos Principales

### üöÄ Comando Maestro
```bash
# COMANDO PRINCIPAL con men√∫ interactivo
./start.sh

# Comandos directos
./start.sh start   # üöÄ EST√ÅNDAR: Docker + hot-reload ‚â§2s
./start.sh stop    # üõë Detener todos los servicios
./start.sh status  # üìä Ver estado del sistema
./start.sh setup   # üîß Reconfigurar desde cero

# ‚ö° IMPORTANTE: Hot-reload ‚â§2s es el EST√ÅNDAR, no opcional
```

### üê≥ Docker Development Mode (NUEVA FUNCIONALIDAD)
```bash
# Comando m√°gico - Una sola l√≠nea para desarrollo completo
./start.sh docker-dev

# O directamente con Smart Docker Manager
cd trivance-dev-config/scripts/utils
./smart-docker-manager.sh dev ../docker/docker-compose.dev.yml
```

#### Caracter√≠sticas del Docker Dev Mode
- ‚ö° **Hot-reload ‚â§2s**: Cambios visibles instant√°neamente
- üê≥ **Containers optimizados**: Multi-stage Dockerfiles con cache inteligente
- üìä **Observabilidad integrada**: Log Viewer autom√°tico en puerto 4000
- üõ°Ô∏è **Error prevention**: Warnings filtrados, feedback visual claro
- üîÑ **Context optimization**: Build context reducido 95% (.dockerignore)

### URLs de Servicios (Desarrollo Local)
- Frontend Admin: http://localhost:5173
- API Principal: http://localhost:3000
- GraphQL Playground: http://localhost:3000/graphql
- API Auth: http://localhost:3001
- Swagger Auth: http://localhost:3001/api-docs
- **üîç Log Viewer**: **http://localhost:4000** (Sistema de observabilidad unificado)
- Dozzle (Monitor logs): http://localhost:9999
- Prisma Studio: http://localhost:5555

## üîß Testing por Repositorio
```bash
# Backend API (ms_level_up_management)
cd ms_level_up_management
npm test              # Unit tests con Jest
npm run test:watch    # Tests en modo watch
npm run test:cov      # Tests con cobertura
npm run test:e2e      # Tests end-to-end

# Auth Service (ms_trivance_auth)
cd ms_trivance_auth
npm test              # Unit tests con Jest
npm run test:watch    # Tests en modo watch
npm run test:cov      # Tests con cobertura

# Frontend (level_up_backoffice)
cd level_up_backoffice
npm test              # Tests con Vitest
```

## üé® Lint y Formateo
```bash
# Backend services
npm run lint          # ESLint con auto-fix
npm run format        # Prettier

# Frontend
npm run lint          # ESLint

# Mobile
npm run lint          # ESLint
npm run lint:fix      # ESLint con auto-fix
npm run format        # Prettier
npm run format:check  # Verificar formato
npm run type-check    # TypeScript check
```

## üóÑÔ∏è Base de Datos (Prisma)
```bash
cd ms_level_up_management
npx prisma migrate dev    # Crear nueva migraci√≥n
npx prisma generate       # Generar cliente Prisma
npx prisma studio         # GUI para explorar DB
npx prisma db push        # Sincronizar schema sin migraci√≥n
```

## üéõÔ∏è Gesti√≥n de Environments
```bash
# Ver environment actual
./trivance-dev-config/scripts/envs.sh status

# Cambiar environment
./trivance-dev-config/scripts/envs.sh switch local       # Desarrollo local
./trivance-dev-config/scripts/envs.sh switch qa          # QA
./trivance-dev-config/scripts/envs.sh switch production  # Producci√≥n

# Validar configuraci√≥n
./trivance-dev-config/scripts/envs.sh validate local
```

## üèóÔ∏è Arquitectura del Sistema

### Flujo de Comunicaci√≥n
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Backoffice    ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Management API ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   PostgreSQL    ‚îÇ
‚îÇ  (Port: 5173)   ‚îÇ     ‚îÇ  (Port: 3000)   ‚îÇ     ‚îÇ  (Port: 5432)   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ
         ‚îÇ                       ‚îÇ GraphQL
         ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Mobile App     ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ    Auth API     ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ    MongoDB      ‚îÇ
‚îÇ   (Expo Dev)    ‚îÇ     ‚îÇ  (Port: 3001)   ‚îÇ     ‚îÇ  (Port: 27017)  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### Arquitectura Multi-tenant
- **Aislamiento de datos**: Por `organizationId` en todas las tablas
- **Permisos granulares**: Sistema de roles y permisos por organizaci√≥n
- **Contexto de usuario**: JWT contiene `organizationId` y permisos

### Stack Tecnol√≥gico
- **Backend**: NestJS + TypeScript + Prisma (PostgreSQL) + Mongoose (MongoDB)
- **Frontend**: React 18 + Vite + Redux Toolkit + Tailwind CSS
- **Mobile**: React Native + Expo + Redux Persist
- **Infraestructura**: Docker + PM2 + Nginx (producci√≥n)
- **Testing**: Jest (backend) + Vitest (frontend)
- **Monitoreo**: Sentry + Dozzle (logs Docker)

## üé® Patrones de C√≥digo

### NestJS Service Pattern
```typescript
@Injectable()
export class EntityService {
  constructor(
    private prisma: PrismaService,
    private readonly relatedService: RelatedService
  ) {}

  async findAll(organizationId: string, query: QueryDto) {
    return this.prisma.entity.findMany({
      where: { organizationId, ...query },
      include: { relations: true }
    });
  }
}
```

### React Component Pattern
```typescript
interface ComponentProps {
  data: DataType;
  onAction: (id: string) => void;
}

export const Component: React.FC<ComponentProps> = ({ data, onAction }) => {
  // Hooks primero
  const dispatch = useAppDispatch();
  const { isLoading } = useAppSelector(selectState);
  
  // L√≥gica del componente
  const handleClick = useCallback(() => {
    onAction(data.id);
  }, [data.id, onAction]);
  
  // Render condicional
  if (isLoading) return <Spinner />;
  
  return <div>{/* JSX */}</div>;
};
```

## üîç Sistema de Observabilidad

### Log Viewer Unificado (Puerto 4000)
```bash
# Iniciar Log Viewer
./trivance-dev-config/scripts/utils/start-log-viewer.sh

# Acceder al sistema
open http://localhost:4000

# API para consultas program√°ticas
curl "http://localhost:4000/api/logs/search?level=error&limit=20" | jq
curl "http://localhost:4000/api/logs/search?sessionId=abc-123" | jq
curl "http://localhost:4000/api/logs/search?text=unauthorized" | jq

# Filtros disponibles:
# - service: frontend, backend, auth
# - level: error, warn, info, debug
# - traceId: seguimiento de requests
# - sessionId: seguimiento de sesiones
# - text: b√∫squeda de texto completo
```

## üö® Troubleshooting

### üîß Smart Docker Manager
```bash
# Usar Smart Docker Manager para evitar falsos errores de timeout
cd trivance-dev-config/scripts/utils

# Operaciones con timeouts adaptativos
./smart-docker-manager.sh up compose_file services     # 600s para first_build, 180s para startup
./smart-docker-manager.sh down compose_file           # 60s para operaciones r√°pidas
./smart-docker-manager.sh restart compose_file        # 300s para rebuild
./smart-docker-manager.sh health_check compose_file   # 120s con m√∫ltiples reintentos

# Ventajas del Smart Manager:
# - Timeouts adaptativos seg√∫n el contexto (primera compilaci√≥n vs reinicio)
# - Feedback visual para eliminar sensaci√≥n de errores falsos
# - Validaci√≥n robusta de dependencias y comandos
# - Compatibilidad con macOS (gtimeout vs timeout)
```

### üõ†Ô∏è Debugging
```bash
# Sistema de Observabilidad Unificado (RECOMENDADO)
open http://localhost:4000  # Log Viewer con filtros avanzados

# Logs en tiempo real
pm2 logs backoffice          # Frontend logs
docker logs -f trivance_mgmt_dev  # Backend logs
docker logs -f trivance_auth_dev  # Auth logs

# Monitor visual de logs Docker
open http://localhost:9999   # Dozzle - interfaz web moderna

# Acceso a bases de datos
docker exec -it trivance_postgres_dev psql -U trivance -d trivance_dev
docker exec -it trivance_mongodb_dev mongosh

# Debug NestJS
cd ms_level_up_management
npm run start:debug  # Attach debugger en puerto 9229
```

## üìö Notas Importantes

### ‚ö†Ô∏è Reglas de Arquitectura
- **Docker obligatorio**: Sistema requiere Docker para backends y DBs
- **Smart Docker Manager**: Previene timeouts falsos con gesti√≥n inteligente
- **Sistema de Observabilidad**: Log Viewer unificado en puerto 4000
- **Secrets autom√°ticos**: Se generan en `.trivance-secrets` (no commitear)
- **Multi-tenant**: Todas las queries deben filtrar por `organizationId`
- **Espa√±ol en docs**: Documentaci√≥n y comentarios en espa√±ol, c√≥digo en ingl√©s
- **Hot-reload**: Frontend (Vite) y backends (NestJS) con recarga autom√°tica

### üîó Documentaci√≥n Especializada
Toda la documentaci√≥n est√° centralizada en `trivance-dev-config/`:
- **README.md** - Fuente de verdad maestra y arquitectura completa
- **docs/DOCKER.md** - Gu√≠a completa Docker y contenedores
- **docs/ENVIRONMENTS.md** - Sistema completo de environments
- **docs/TROUBLESHOOTING.md** - Soluci√≥n de problemas y debugging

---

## üéØ TEMPLATE AUTO-SINCRONIZADO

**‚ö†Ô∏è IMPORTANTE**: Este archivo es **GENERADO AUTOM√ÅTICAMENTE**

- üîß **Fuente**: `trivance-dev-config/templates/core/CLAUDE.md.template`
- ü§ñ **Generado por**: Script `setup.sh` 
- üîÑ **Auto-update**: Cada vez que se ejecuta setup
- üåü **Optimizado para**: Claude Code con workspace multi-repo en espa√±ol

**Para modificar, edita el template y ejecuta `./trivance-dev-config/setup.sh`**
# 🤖 CLAUDE.md - Configuración Maestra Claude Code para Trivance Platform

## 🌟 WORKSPACE AUTO-CONFIGURADO DESDE TRIVANCE-DEV-CONFIG

**Este archivo fue generado automáticamente por el script de setup de trivance-dev-config**

## 🎯 CONFIGURACIÓN HÍBRIDA INTELIGENTE

**✅ Desarrollo Local**: 100% automático - Todo funciona inmediatamente
**⚠️ QA/Producción**: Configuración manual requerida por seguridad

**Para deployment a QA/Producción ver**: `./trivance-dev-config/docs/DEPLOYMENT.md`

Claude Code debe operar en español:
- ✅ **Todas las respuestas en español**
- ✅ **Documentación generada en español**
- ✅ **Comentarios de código en español**
- ✅ **Mensajes de error en español**
- ✅ **Commits sugeridos en español**
- ✅ **Explicaciones técnicas en español**
- ⚠️ **Código en inglés** (variables, funciones - estándar internacional)

## 🏗️ WORKSPACE MULTI-REPO COMPLETO

Este workspace fue configurado automáticamente desde el repositorio `trivance-dev-config`. 
Estructura completa creada:

```
Trivance-platform/                    # 📁 Workspace principal auto-creado
├── CLAUDE.md                         # ← ESTE ARCHIVO (auto-generado)
├── README.md                         # Documentación principal (auto-generado)
├── TrivancePlatform.code-workspace   # VS Code multi-repo (auto-configurado)
├── .gitignore                        # Git ignore maestro (auto-creado)
├── start.sh                          # 🚀 Comando principal (menú interactivo)
├── envs/                             # 🔐 Configuraciones de environments (no en git)
├── trivance-dev-config/              # 🔧 REPO DE CONFIGURACIONES (clonado)
│   ├── .claude/                      # ⚙️ Configuración Claude Code
│   │   ├── settings.json             # Settings principales Claude
│   │   └── context.md                # Contexto técnico del proyecto
│   ├── scripts/                      # 🚀 Scripts maestros
│   │   ├── core/
│   │   │   └── orchestrator.sh       # Script de configuración completa
│   │   ├── utils/
│   │   │   ├── smart-start.sh        # Inicio inteligente con validación
│   │   │   ├── health-check.sh       # Verificación y auto-fix
│   │   │   ├── clean-workspace.sh    # Limpieza del workspace
│   │   │   ├── parallel-install.sh   # Instalación paralela rápida
│   │   │   └── post-setup-fixes.sh   # Fixes automáticos post-setup
│   │   ├── envs.sh                   # Gestión de environments
│   │   └── verify-compilation.sh     # Verificar compilación
│   ├── templates/                    # 📄 Templates para auto-generación
│   │   ├── CLAUDE.md.template        # Template de este archivo
│   │   └── TrivancePlatform.code-workspace.template
│   ├── docker/                       # 🐳 Configuración Docker
│   │   ├── docker-compose.yaml       # Orquestación de servicios
│   │   ├── Dockerfile.*              # Imágenes optimizadas
│   │   └── Makefile                  # Comandos simplificados
│   └── docs/                         # 📚 Documentación completa
│       ├── ONBOARDING.md             # Guía completa de onboarding
│       ├── WORKFLOWS.md              # Procesos y metodologías
│       ├── TROUBLESHOOTING.md        # Solución de problemas
│       └── DOCKER.md                 # Guía completa Docker
├── level_up_backoffice/              # 🌐 Frontend (React + Vite) - AUTO-CLONADO
├── ms_level_up_management/           # 🚀 API Backend (NestJS + GraphQL) - AUTO-CLONADO
├── ms_trivance_auth/                 # 🔐 Auth Service (NestJS) - AUTO-CLONADO
└── trivance-mobile/                  # 📱 Mobile App (React Native) - AUTO-CLONADO
```

## 🎯 CONFIGURACIÓN CLAUDE CODE OPTIMIZADA

### Archivos de Configuración Activos
- **Settings Claude**: `./trivance-dev-config/.claude/settings.json`
- **Contexto Técnico**: `./trivance-dev-config/.claude/context.md`
- **Comandos Custom**: `./trivance-dev-config/.claude/commands.md`
- **Prompts Predefinidos**: `./trivance-dev-config/.claude/prompts.md`
- **Hooks Automatización**: `./trivance-dev-config/.claude/hooks.json`

### Configuración Multi-Repo para Claude
Claude Code debe entender que opera en un **workspace multi-repositorio** donde:

1. **4 repositorios integrados** con dependencias entre ellos
2. **Cada repo tiene tecnologías específicas** y propósitos únicos
3. **Los cambios pueden ser cross-repo** y requieren coordinación
4. **Configuración centralizada** en `trivance-dev-config`
5. **Flujo AI-FIRST** con español como idioma principal

### URLs de Servicios Auto-Configurados

#### Desarrollo Local (Auto-configurado)
- **Auth Service**: http://localhost:3001 (Docker)
- **Management API**: http://localhost:3000 (Docker)
- **GraphQL Playground**: http://localhost:3000/graphql (Docker)
- **Frontend Admin**: http://localhost:5173 (PM2)
- **Swagger Auth Docs**: http://localhost:3001/api-docs (Docker)
- **🔍 Log Viewer**: **http://localhost:4000** (Docker) - Sistema de observabilidad unificado
- **📊 Dozzle Logs**: http://localhost:9999 (Docker) - Monitor visual de logs
- **PostgreSQL**: localhost:5432 (Docker)
- **MongoDB**: localhost:27017 (Docker)

#### QA Environment
- **Auth QA**: https://auth-qa.example.com
- **API QA**: https://api-qa.example.com
- **Frontend QA**: https://staging-admin.example.com

## 🚀 COMANDO PRINCIPAL PARA CLAUDE CODE

### ⚡ UN SOLO COMANDO PARA TODO
```bash
# COMANDO PRINCIPAL - MENÚ INTERACTIVO
./start.sh

# O CON ARGUMENTOS DIRECTOS:
./start.sh start    # Iniciar servicios
./start.sh stop     # Detener servicios  
./start.sh status   # Ver estado
./start.sh setup    # Configurar desde cero
```

### 🐳 MODO HÍBRIDO: DOCKER + PM2

El sistema detecta automáticamente si Docker está disponible y usa el modo óptimo:

- **CON Docker**: Backends y DBs en contenedores + Frontend con PM2 (hot-reload)
- **SIN Docker**: Todo con PM2 (fallback automático)

```bash
# El sistema detecta y te informa:
✅ Docker detectado - Usando modo híbrido Docker + PM2
# o
⚠️  Docker no disponible - Usando PM2 para todo
```

### 📁 Referencia Completa de Comandos
Para ver todos los comandos disponibles y sus rutas completas:
```bash
cat ./trivance-dev-config/docs/COMMANDS.md
```

### 🐳 Gestión Docker (cuando está disponible)
Desde el menú principal, opción 6:
- Ver logs de contenedores
- Reconstruir imágenes
- Resetear bases de datos
- Acceder a shell de contenedores
- Monitorear recursos

Documentación completa: `./trivance-dev-config/docs/DOCKER.md`

## 🏗️ ARQUITECTURA TÉCNICA COMPLETA

### level_up_backoffice (Frontend Administrativo)
```typescript
// 🌐 Panel de administración web
// Puerto: 5173 (development)
// Tecnologías:
- React 18+ con TypeScript 5.3+
- Vite (bundler + dev server)
- Redux Toolkit + RTK Query (estado global)
- Apollo Client (GraphQL)
- Tailwind CSS + Material-UI (diseño)
- Vitest (testing)

// Patrón de componentes estándar
interface ComponentProps {
  // Props siempre tipadas
}

export const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // 1. Hooks de React primero
  // 2. Hooks de Redux/Apollo
  // 3. Lógica del componente
  // 4. Efectos y callbacks
  // 5. Return JSX estructurado
}

// Separación de lógica: Component.tsx + ComponentLogic.ts
```

### ms_level_up_management (API Backend Principal)
```typescript
// 🚀 API principal del sistema
// Puerto: 3000 (development)
// Tecnologías:
- NestJS con TypeScript
- PostgreSQL + Prisma ORM
- GraphQL con Apollo Server
- REST endpoints complementarios
- JWT para autenticación
- Sentry para monitoreo

// Patrón de módulos NestJS
@Module({
  imports: [TypeOrmModule.forFeature([Entity])],
  controllers: [EntityController],
  providers: [EntityService],
  exports: [EntityService]
})
export class EntityModule {}

// Implementaciones:
- Patrón CQRS
- Validación con class-validator
- Transformación con class-transformer
- Guards para autenticación/autorización
```

### ms_trivance_auth (Servicio de Autenticación)
```typescript
// 🔐 Servicio de autenticación dedicado
// Puerto: 3001 (development)
// Tecnologías:
- NestJS con TypeScript
- MongoDB + Mongoose
- JWT + Refresh Tokens
- bcrypt para password hashing
- Passport para estrategias de auth

// Patrones de seguridad:
- Rate limiting configurado
- Validación de entrada estricta
- Sanitización de datos
- Logging de eventos de seguridad
- Multi-factor authentication (MFA)
```

### trivance-mobile (Aplicación Móvil)
```typescript
// 📱 App móvil nativa
// Tecnologías:
- React Native con Expo 53
- TypeScript para tipado completo
- React Navigation v6
- Redux Toolkit + Redux Persist
- Firebase Crashlytics
- AsyncStorage para persistencia

// Patrón de pantallas móviles
interface ScreenProps {
  navigation: NavigationProp<any>
  route: RouteProp<any>
}

export const ScreenName: React.FC<ScreenProps> = ({ navigation, route }) => {
  // 1. Hooks de Redux para estado global
  // 2. Hooks de navegación
  // 3. Lógica específica de la pantalla
  // 4. Manejo de estados de carga/error
  // 5. Return JSX optimizado para móvil
}
```

## 🎨 PATRONES DE CÓDIGO UNIFICADOS

### Convenciones de Naming (Estándar del Equipo)
```typescript
// ✅ Variables y funciones en inglés (estándar internacional)
const userList = users.map(user => user.name);
const handleUserClick = (userId: string) => { ... };

// ✅ Comentarios siempre en español
/**
 * Obtiene la lista de usuarios activos de la organización
 * @param organizationId - ID de la organización  
 * @returns Lista de usuarios activos con información completa
 */
const getActiveUsers = async (organizationId: string): Promise<User[]> => {
  // Filtrar solo usuarios con estado activo y validar permisos
  return await userService.findActiveByOrganization(organizationId);
}

// ✅ Interfaces y tipos en inglés con documentación en español
interface UserCreateRequest {
  /** Nombre completo del usuario */
  fullName: string;
  /** Email único del usuario */
  email: string;
  /** ID de la organización a la que pertenece */
  organizationId: string;
}
```

### Estructura de Commits (Conventional Commits en Español)
```bash
# ✅ Usar conventional commits en español
feat: agregar autenticación de dos factores para usuarios admin
fix: corregir error en cálculo de comisiones de eventos
docs: actualizar documentación de endpoints GraphQL
style: mejorar espaciado y diseño en componente de navegación
refactor: simplificar lógica de validación de formularios
test: agregar tests unitarios para módulo de notificaciones
perf: optimizar consultas de base de datos en reportes
chore: actualizar dependencias de seguridad
```

## 🔐 CONFIGURACIÓN DE VARIABLES DE ENTORNO

### ms_level_up_management (.env) - AUTO-GENERADO
```bash
# Configuración de la aplicación
NODE_ENV=development
PORT=3000
APP_NAME=Trivance Management API
APP_VERSION=1.0.0

# Base de datos PostgreSQL
DATABASE_URL=postgresql://username:password@localhost:5432/database_name

# Autenticación y seguridad
JWT_SECRET=REEMPLAZAR_CON_SECRET_SUPER_SEGURO
JWT_EXPIRATION_TIME=3600
REFRESH_TOKEN_EXPIRATION_TIME=604800

# AWS S3 para almacenamiento de archivos
AWS_ACCESS_KEY_ID=REEMPLAZAR_CON_AWS_KEY
AWS_SECRET_ACCESS_KEY=REEMPLAZAR_CON_AWS_SECRET
AWS_REGION=us-east-1
AWS_S3_BUCKET=trivance-uploads-dev

# Monitoreo y logging
SENTRY_DSN=REEMPLAZAR_CON_SENTRY_DSN
LOG_LEVEL=debug

# GraphQL configuración
GRAPHQL_PLAYGROUND=true
GRAPHQL_DEBUG=true
GRAPHQL_INTROSPECTION=true

# Rate limiting
RATE_LIMIT_TTL=60
RATE_LIMIT_LIMIT=100

# CORS
CORS_ORIGIN=http://localhost:5173,http://localhost:3000
```

### ms_trivance_auth (.env) - AUTO-GENERADO
```bash
# Configuración de la aplicación
NODE_ENV=development
PORT=3001
APP_NAME=Trivance Auth Service
APP_VERSION=1.0.0

# Base de datos MongoDB
DATABASE_URL=mongodb://localhost:27017/trivance_auth

# Autenticación y tokens
JWT_SECRET=REEMPLAZAR_CON_SECRET_SUPER_SEGURO
JWT_EXPIRATION_TIME=3600
REFRESH_TOKEN_EXPIRATION_TIME=604800

# Encriptación de passwords
BCRYPT_ROUNDS=12

# Rate limiting específico para auth
RATE_LIMIT_TTL=60
RATE_LIMIT_LIMIT=50

# Configuración de sesiones
SESSION_SECRET=REEMPLAZAR_CON_SESSION_SECRET
SESSION_EXPIRATION=86400

# OAuth providers (opcional)
GOOGLE_CLIENT_ID=REEMPLAZAR_SI_SE_USA_GOOGLE_AUTH
GOOGLE_CLIENT_SECRET=REEMPLAZAR_SI_SE_USA_GOOGLE_AUTH

# Monitoring
SENTRY_DSN=REEMPLAZAR_CON_SENTRY_DSN
```

### level_up_backoffice (.env.local) - AUTO-GENERADO
```bash
# URLs de APIs backend
VITE_API_URL=http://localhost:3000
VITE_AUTH_API_URL=http://localhost:3001
VITE_GRAPHQL_URL=http://localhost:3000/graphql

# Configuración de la aplicación
VITE_APP_NAME=Trivance Admin Panel
VITE_APP_VERSION=1.0.0
VITE_APP_DESCRIPTION=Panel administrativo de Trivance Platform

# Monitoreo frontend
VITE_SENTRY_DSN=REEMPLAZAR_CON_SENTRY_FRONTEND_DSN

# APIs externas
VITE_GOOGLE_MAPS_API_KEY=REEMPLAZAR_SI_SE_USA_GOOGLE_MAPS

# Configuración de desarrollo
VITE_DEBUG_MODE=true
VITE_MOCK_API=false
```

## 📚 DOCUMENTACIÓN DISPONIBLE

### Guías Actuales
- `trivance-dev-config/docs/ONBOARDING.md` - Guía completa de onboarding
- `trivance-dev-config/docs/WORKFLOWS.md` - Procesos y metodologías  
- `trivance-dev-config/docs/TROUBLESHOOTING.md` - Solución de problemas
- `trivance-dev-config/docs/DOCKER.md` - Integración Docker y modo híbrido

### Por Repositorio
Cada repositorio tiene su propia documentación en el directorio `docs/`:
- Backend Management: `ms_level_up_management/docs/`
- Backend Auth: `ms_trivance_auth/docs/`
- Frontend: `level_up_backoffice/docs/`
- Mobile: `trivance-mobile/docs/`

## 🆘 SOPORTE Y DOCUMENTACIÓN INTEGRADA

### Contactos y Escalación
```typescript
// Sistema de soporte integrado:
// 📞 Nivel 1: Documentación en trivance-dev-config/docs/
// 📞 Nivel 2: Slack #dev-support (auto-notificación)
// 📞 Nivel 3: GitHub Issues automático con contexto
// 📞 Nivel 4: Escalación a tech lead con métricas
```

---

## 🎯 CONFIGURACIÓN AUTO-SINCRONIZADA

**Este archivo CLAUDE.md se auto-actualiza desde `trivance-dev-config`**

- 🔄 **Auto-sincronización**: Cada pull del repo config actualiza este archivo
- 🤖 **Generado automáticamente**: Por script `setup.sh`
- 📅 **Última actualización**: $(date '+%Y-%m-%d %H:%M:%S')
- 🌟 **Optimizado para**: Claude Code en español con workspace multi-repo
- 🔧 **Fuente de verdad**: `trivance-dev-config/templates/CLAUDE.md.template`

**Para actualizar este archivo, edita el template en `trivance-dev-config/templates/CLAUDE.md.template` y ejecuta `./setup.sh`**